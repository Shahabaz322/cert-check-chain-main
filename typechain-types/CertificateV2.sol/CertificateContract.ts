/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export declare namespace CertificateContract {
  export type CertificateStruct = {
    id: BigNumberish;
    rollNumber: string;
    recipient: AddressLike;
    name: string;
    course: string;
    institution: string;
    dateIssued: BigNumberish;
    isValid: boolean;
    documentHash: BytesLike;
    isClaimed: boolean;
  };

  export type CertificateStructOutput = [
    id: bigint,
    rollNumber: string,
    recipient: string,
    name: string,
    course: string,
    institution: string,
    dateIssued: bigint,
    isValid: boolean,
    documentHash: string,
    isClaimed: boolean
  ] & {
    id: bigint;
    rollNumber: string;
    recipient: string;
    name: string;
    course: string;
    institution: string;
    dateIssued: bigint;
    isValid: boolean;
    documentHash: string;
    isClaimed: boolean;
  };
}

export interface CertificateContractInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "certificates"
      | "claimCertificate"
      | "getCertificate"
      | "getCertificateByHash"
      | "getRecipientCertificates"
      | "getRollNumberCertificates"
      | "getTotalCertificates"
      | "hasRollNumber"
      | "hashToCertificateId"
      | "issueCertificate"
      | "nextCertificateId"
      | "owner"
      | "recipientCertificates"
      | "revokeCertificate"
      | "rollNumberCertificates"
      | "rollNumberExists"
      | "transferOwnership"
      | "verifyCertificate"
      | "verifyCertificateByHash"
      | "verifyCertificateByRollNumber"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "CertificateClaimed"
      | "CertificateIssued"
      | "CertificateRevoked"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "certificates",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "claimCertificate",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getCertificate",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getCertificateByHash",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getRecipientCertificates",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getRollNumberCertificates",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalCertificates",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "hasRollNumber",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "hashToCertificateId",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "issueCertificate",
    values: [string, string, string, string, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "nextCertificateId",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "recipientCertificates",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeCertificate",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "rollNumberCertificates",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "rollNumberExists",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "verifyCertificate",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "verifyCertificateByHash",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "verifyCertificateByRollNumber",
    values: [string, BytesLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "certificates",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimCertificate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCertificate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCertificateByHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRecipientCertificates",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRollNumberCertificates",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotalCertificates",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "hasRollNumber",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "hashToCertificateId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "issueCertificate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "nextCertificateId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "recipientCertificates",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "revokeCertificate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rollNumberCertificates",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rollNumberExists",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "verifyCertificate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "verifyCertificateByHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "verifyCertificateByRollNumber",
    data: BytesLike
  ): Result;
}

export namespace CertificateClaimedEvent {
  export type InputTuple = [
    certificateId: BigNumberish,
    rollNumber: string,
    recipient: AddressLike
  ];
  export type OutputTuple = [
    certificateId: bigint,
    rollNumber: string,
    recipient: string
  ];
  export interface OutputObject {
    certificateId: bigint;
    rollNumber: string;
    recipient: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace CertificateIssuedEvent {
  export type InputTuple = [
    certificateId: BigNumberish,
    rollNumber: string,
    name: string,
    course: string,
    documentHash: BytesLike
  ];
  export type OutputTuple = [
    certificateId: bigint,
    rollNumber: string,
    name: string,
    course: string,
    documentHash: string
  ];
  export interface OutputObject {
    certificateId: bigint;
    rollNumber: string;
    name: string;
    course: string;
    documentHash: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace CertificateRevokedEvent {
  export type InputTuple = [certificateId: BigNumberish];
  export type OutputTuple = [certificateId: bigint];
  export interface OutputObject {
    certificateId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface CertificateContract extends BaseContract {
  connect(runner?: ContractRunner | null): CertificateContract;
  waitForDeployment(): Promise<this>;

  interface: CertificateContractInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  certificates: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [
        bigint,
        string,
        string,
        string,
        string,
        string,
        bigint,
        boolean,
        string,
        boolean
      ] & {
        id: bigint;
        rollNumber: string;
        recipient: string;
        name: string;
        course: string;
        institution: string;
        dateIssued: bigint;
        isValid: boolean;
        documentHash: string;
        isClaimed: boolean;
      }
    ],
    "view"
  >;

  claimCertificate: TypedContractMethod<
    [_rollNumber: string, _certificateId: BigNumberish],
    [void],
    "nonpayable"
  >;

  getCertificate: TypedContractMethod<
    [_certificateId: BigNumberish],
    [CertificateContract.CertificateStructOutput],
    "view"
  >;

  getCertificateByHash: TypedContractMethod<
    [_documentHash: BytesLike],
    [CertificateContract.CertificateStructOutput],
    "view"
  >;

  getRecipientCertificates: TypedContractMethod<
    [_recipient: AddressLike],
    [bigint[]],
    "view"
  >;

  getRollNumberCertificates: TypedContractMethod<
    [_rollNumber: string],
    [bigint[]],
    "view"
  >;

  getTotalCertificates: TypedContractMethod<[], [bigint], "view">;

  hasRollNumber: TypedContractMethod<[_rollNumber: string], [boolean], "view">;

  hashToCertificateId: TypedContractMethod<[arg0: BytesLike], [bigint], "view">;

  issueCertificate: TypedContractMethod<
    [
      _rollNumber: string,
      _name: string,
      _course: string,
      _institution: string,
      _dateIssued: BigNumberish,
      _documentHash: BytesLike
    ],
    [bigint],
    "nonpayable"
  >;

  nextCertificateId: TypedContractMethod<[], [bigint], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  recipientCertificates: TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [bigint],
    "view"
  >;

  revokeCertificate: TypedContractMethod<
    [_certificateId: BigNumberish],
    [void],
    "nonpayable"
  >;

  rollNumberCertificates: TypedContractMethod<
    [arg0: string, arg1: BigNumberish],
    [bigint],
    "view"
  >;

  rollNumberExists: TypedContractMethod<[arg0: string], [boolean], "view">;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  verifyCertificate: TypedContractMethod<
    [_certificateId: BigNumberish],
    [boolean],
    "view"
  >;

  verifyCertificateByHash: TypedContractMethod<
    [_documentHash: BytesLike],
    [boolean],
    "view"
  >;

  verifyCertificateByRollNumber: TypedContractMethod<
    [_rollNumber: string, _documentHash: BytesLike],
    [boolean],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "certificates"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [
        bigint,
        string,
        string,
        string,
        string,
        string,
        bigint,
        boolean,
        string,
        boolean
      ] & {
        id: bigint;
        rollNumber: string;
        recipient: string;
        name: string;
        course: string;
        institution: string;
        dateIssued: bigint;
        isValid: boolean;
        documentHash: string;
        isClaimed: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "claimCertificate"
  ): TypedContractMethod<
    [_rollNumber: string, _certificateId: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getCertificate"
  ): TypedContractMethod<
    [_certificateId: BigNumberish],
    [CertificateContract.CertificateStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getCertificateByHash"
  ): TypedContractMethod<
    [_documentHash: BytesLike],
    [CertificateContract.CertificateStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getRecipientCertificates"
  ): TypedContractMethod<[_recipient: AddressLike], [bigint[]], "view">;
  getFunction(
    nameOrSignature: "getRollNumberCertificates"
  ): TypedContractMethod<[_rollNumber: string], [bigint[]], "view">;
  getFunction(
    nameOrSignature: "getTotalCertificates"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "hasRollNumber"
  ): TypedContractMethod<[_rollNumber: string], [boolean], "view">;
  getFunction(
    nameOrSignature: "hashToCertificateId"
  ): TypedContractMethod<[arg0: BytesLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "issueCertificate"
  ): TypedContractMethod<
    [
      _rollNumber: string,
      _name: string,
      _course: string,
      _institution: string,
      _dateIssued: BigNumberish,
      _documentHash: BytesLike
    ],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "nextCertificateId"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "recipientCertificates"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "revokeCertificate"
  ): TypedContractMethod<[_certificateId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "rollNumberCertificates"
  ): TypedContractMethod<[arg0: string, arg1: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "rollNumberExists"
  ): TypedContractMethod<[arg0: string], [boolean], "view">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "verifyCertificate"
  ): TypedContractMethod<[_certificateId: BigNumberish], [boolean], "view">;
  getFunction(
    nameOrSignature: "verifyCertificateByHash"
  ): TypedContractMethod<[_documentHash: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "verifyCertificateByRollNumber"
  ): TypedContractMethod<
    [_rollNumber: string, _documentHash: BytesLike],
    [boolean],
    "view"
  >;

  getEvent(
    key: "CertificateClaimed"
  ): TypedContractEvent<
    CertificateClaimedEvent.InputTuple,
    CertificateClaimedEvent.OutputTuple,
    CertificateClaimedEvent.OutputObject
  >;
  getEvent(
    key: "CertificateIssued"
  ): TypedContractEvent<
    CertificateIssuedEvent.InputTuple,
    CertificateIssuedEvent.OutputTuple,
    CertificateIssuedEvent.OutputObject
  >;
  getEvent(
    key: "CertificateRevoked"
  ): TypedContractEvent<
    CertificateRevokedEvent.InputTuple,
    CertificateRevokedEvent.OutputTuple,
    CertificateRevokedEvent.OutputObject
  >;

  filters: {
    "CertificateClaimed(uint256,string,address)": TypedContractEvent<
      CertificateClaimedEvent.InputTuple,
      CertificateClaimedEvent.OutputTuple,
      CertificateClaimedEvent.OutputObject
    >;
    CertificateClaimed: TypedContractEvent<
      CertificateClaimedEvent.InputTuple,
      CertificateClaimedEvent.OutputTuple,
      CertificateClaimedEvent.OutputObject
    >;

    "CertificateIssued(uint256,string,string,string,bytes32)": TypedContractEvent<
      CertificateIssuedEvent.InputTuple,
      CertificateIssuedEvent.OutputTuple,
      CertificateIssuedEvent.OutputObject
    >;
    CertificateIssued: TypedContractEvent<
      CertificateIssuedEvent.InputTuple,
      CertificateIssuedEvent.OutputTuple,
      CertificateIssuedEvent.OutputObject
    >;

    "CertificateRevoked(uint256)": TypedContractEvent<
      CertificateRevokedEvent.InputTuple,
      CertificateRevokedEvent.OutputTuple,
      CertificateRevokedEvent.OutputObject
    >;
    CertificateRevoked: TypedContractEvent<
      CertificateRevokedEvent.InputTuple,
      CertificateRevokedEvent.OutputTuple,
      CertificateRevokedEvent.OutputObject
    >;
  };
}
