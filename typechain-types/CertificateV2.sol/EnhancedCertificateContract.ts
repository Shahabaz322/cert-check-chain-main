/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export declare namespace EnhancedCertificateContract {
  export type CertificateStruct = {
    id: BigNumberish;
    rollNumber: string;
    recipient: AddressLike;
    name: string;
    course: string;
    institution: string;
    dateIssued: BigNumberish;
    isValid: boolean;
    contentHash: BytesLike;
    metadataHash: BytesLike;
    combinedHash: BytesLike;
    institutionSignature: BytesLike;
    institutionAddress: AddressLike;
    timestamp: BigNumberish;
    isClaimed: boolean;
    ipfsHash: string;
  };

  export type CertificateStructOutput = [
    id: bigint,
    rollNumber: string,
    recipient: string,
    name: string,
    course: string,
    institution: string,
    dateIssued: bigint,
    isValid: boolean,
    contentHash: string,
    metadataHash: string,
    combinedHash: string,
    institutionSignature: string,
    institutionAddress: string,
    timestamp: bigint,
    isClaimed: boolean,
    ipfsHash: string
  ] & {
    id: bigint;
    rollNumber: string;
    recipient: string;
    name: string;
    course: string;
    institution: string;
    dateIssued: bigint;
    isValid: boolean;
    contentHash: string;
    metadataHash: string;
    combinedHash: string;
    institutionSignature: string;
    institutionAddress: string;
    timestamp: bigint;
    isClaimed: boolean;
    ipfsHash: string;
  };

  export type InstitutionStruct = {
    name: string;
    registrationNumber: string;
    isAuthorized: boolean;
    registrationDate: BigNumberish;
    totalCertificatesIssued: BigNumberish;
    isActive: boolean;
  };

  export type InstitutionStructOutput = [
    name: string,
    registrationNumber: string,
    isAuthorized: boolean,
    registrationDate: bigint,
    totalCertificatesIssued: bigint,
    isActive: boolean
  ] & {
    name: string;
    registrationNumber: string;
    isAuthorized: boolean;
    registrationDate: bigint;
    totalCertificatesIssued: bigint;
    isActive: boolean;
  };

  export type RevocationRecordStruct = {
    certificateId: BigNumberish;
    revocationDate: BigNumberish;
    reason: string;
    revokedBy: AddressLike;
  };

  export type RevocationRecordStructOutput = [
    certificateId: bigint,
    revocationDate: bigint,
    reason: string,
    revokedBy: string
  ] & {
    certificateId: bigint;
    revocationDate: bigint;
    reason: string;
    revokedBy: string;
  };
}

export interface EnhancedCertificateContractInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "batchIssueCertificates"
      | "certificates"
      | "claimCertificate"
      | "getCertificate"
      | "getCertificatesByRecipient"
      | "getCertificatesByRollNumber"
      | "getContractStats"
      | "getInstitutionInfo"
      | "getRevocationInfo"
      | "hashToCertificateId"
      | "institutions"
      | "issueCertificate"
      | "nextCertificateId"
      | "owner"
      | "pause"
      | "recipientCertificates"
      | "registerInstitution"
      | "revocations"
      | "revokeCertificate"
      | "rollNumberCertificates"
      | "rollNumberExists"
      | "totalCertificatesIssued"
      | "totalInstitutions"
      | "transferOwnership"
      | "updateInstitutionStatus"
      | "usedHashes"
      | "verifyCertificate"
      | "verifyCertificateByContentHash"
      | "verifyWithContent"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "CertificateClaimed"
      | "CertificateIssued"
      | "CertificateRevoked"
      | "InstitutionRegistered"
      | "InstitutionStatusChanged"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "batchIssueCertificates",
    values: [
      string[],
      string[],
      string[],
      string,
      BigNumberish,
      BytesLike[],
      BytesLike[],
      BytesLike[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "certificates",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "claimCertificate",
    values: [string, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getCertificate",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getCertificatesByRecipient",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getCertificatesByRollNumber",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getContractStats",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getInstitutionInfo",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getRevocationInfo",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "hashToCertificateId",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "institutions",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "issueCertificate",
    values: [
      string,
      string,
      string,
      string,
      BigNumberish,
      BytesLike,
      BytesLike,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "nextCertificateId",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "recipientCertificates",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "registerInstitution",
    values: [AddressLike, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "revocations",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeCertificate",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "rollNumberCertificates",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "rollNumberExists",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "totalCertificatesIssued",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalInstitutions",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "updateInstitutionStatus",
    values: [AddressLike, boolean, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "usedHashes",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "verifyCertificate",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "verifyCertificateByContentHash",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "verifyWithContent",
    values: [BigNumberish, BytesLike, string, string]
  ): string;

  decodeFunctionResult(
    functionFragment: "batchIssueCertificates",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "certificates",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimCertificate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCertificate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCertificatesByRecipient",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCertificatesByRollNumber",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getContractStats",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getInstitutionInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRevocationInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "hashToCertificateId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "institutions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "issueCertificate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "nextCertificateId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "recipientCertificates",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerInstitution",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "revocations",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "revokeCertificate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rollNumberCertificates",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rollNumberExists",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalCertificatesIssued",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalInstitutions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateInstitutionStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "usedHashes", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "verifyCertificate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "verifyCertificateByContentHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "verifyWithContent",
    data: BytesLike
  ): Result;
}

export namespace CertificateClaimedEvent {
  export type InputTuple = [
    certificateId: BigNumberish,
    rollNumber: string,
    recipient: AddressLike
  ];
  export type OutputTuple = [
    certificateId: bigint,
    rollNumber: string,
    recipient: string
  ];
  export interface OutputObject {
    certificateId: bigint;
    rollNumber: string;
    recipient: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace CertificateIssuedEvent {
  export type InputTuple = [
    certificateId: BigNumberish,
    rollNumber: string,
    name: string,
    course: string,
    institutionAddress: AddressLike,
    contentHash: BytesLike,
    combinedHash: BytesLike
  ];
  export type OutputTuple = [
    certificateId: bigint,
    rollNumber: string,
    name: string,
    course: string,
    institutionAddress: string,
    contentHash: string,
    combinedHash: string
  ];
  export interface OutputObject {
    certificateId: bigint;
    rollNumber: string;
    name: string;
    course: string;
    institutionAddress: string;
    contentHash: string;
    combinedHash: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace CertificateRevokedEvent {
  export type InputTuple = [
    certificateId: BigNumberish,
    revokedBy: AddressLike,
    reason: string
  ];
  export type OutputTuple = [
    certificateId: bigint,
    revokedBy: string,
    reason: string
  ];
  export interface OutputObject {
    certificateId: bigint;
    revokedBy: string;
    reason: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace InstitutionRegisteredEvent {
  export type InputTuple = [
    institutionAddress: AddressLike,
    name: string,
    registrationNumber: string
  ];
  export type OutputTuple = [
    institutionAddress: string,
    name: string,
    registrationNumber: string
  ];
  export interface OutputObject {
    institutionAddress: string;
    name: string;
    registrationNumber: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace InstitutionStatusChangedEvent {
  export type InputTuple = [
    institutionAddress: AddressLike,
    isAuthorized: boolean,
    isActive: boolean
  ];
  export type OutputTuple = [
    institutionAddress: string,
    isAuthorized: boolean,
    isActive: boolean
  ];
  export interface OutputObject {
    institutionAddress: string;
    isAuthorized: boolean;
    isActive: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface EnhancedCertificateContract extends BaseContract {
  connect(runner?: ContractRunner | null): EnhancedCertificateContract;
  waitForDeployment(): Promise<this>;

  interface: EnhancedCertificateContractInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  batchIssueCertificates: TypedContractMethod<
    [
      _rollNumbers: string[],
      _names: string[],
      _courses: string[],
      _institution: string,
      _dateIssued: BigNumberish,
      _contentHashes: BytesLike[],
      _metadataHashes: BytesLike[],
      _signatures: BytesLike[]
    ],
    [bigint[]],
    "nonpayable"
  >;

  certificates: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [
        bigint,
        string,
        string,
        string,
        string,
        string,
        bigint,
        boolean,
        string,
        string,
        string,
        string,
        string,
        bigint,
        boolean,
        string
      ] & {
        id: bigint;
        rollNumber: string;
        recipient: string;
        name: string;
        course: string;
        institution: string;
        dateIssued: bigint;
        isValid: boolean;
        contentHash: string;
        metadataHash: string;
        combinedHash: string;
        institutionSignature: string;
        institutionAddress: string;
        timestamp: bigint;
        isClaimed: boolean;
        ipfsHash: string;
      }
    ],
    "view"
  >;

  claimCertificate: TypedContractMethod<
    [
      _rollNumber: string,
      _certificateId: BigNumberish,
      _studentSignature: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  getCertificate: TypedContractMethod<
    [_certificateId: BigNumberish],
    [EnhancedCertificateContract.CertificateStructOutput],
    "view"
  >;

  getCertificatesByRecipient: TypedContractMethod<
    [_recipient: AddressLike],
    [bigint[]],
    "view"
  >;

  getCertificatesByRollNumber: TypedContractMethod<
    [_rollNumber: string],
    [bigint[]],
    "view"
  >;

  getContractStats: TypedContractMethod<
    [],
    [
      [bigint, bigint, bigint, bigint] & {
        totalCerts: bigint;
        totalInsts: bigint;
        activeCerts: bigint;
        revokedCerts: bigint;
      }
    ],
    "view"
  >;

  getInstitutionInfo: TypedContractMethod<
    [_institution: AddressLike],
    [EnhancedCertificateContract.InstitutionStructOutput],
    "view"
  >;

  getRevocationInfo: TypedContractMethod<
    [_certificateId: BigNumberish],
    [EnhancedCertificateContract.RevocationRecordStructOutput],
    "view"
  >;

  hashToCertificateId: TypedContractMethod<[arg0: BytesLike], [bigint], "view">;

  institutions: TypedContractMethod<
    [arg0: AddressLike],
    [
      [string, string, boolean, bigint, bigint, boolean] & {
        name: string;
        registrationNumber: string;
        isAuthorized: boolean;
        registrationDate: bigint;
        totalCertificatesIssued: bigint;
        isActive: boolean;
      }
    ],
    "view"
  >;

  issueCertificate: TypedContractMethod<
    [
      _rollNumber: string,
      _name: string,
      _course: string,
      _institution: string,
      _dateIssued: BigNumberish,
      _contentHash: BytesLike,
      _metadataHash: BytesLike,
      _institutionSignature: BytesLike
    ],
    [bigint],
    "nonpayable"
  >;

  nextCertificateId: TypedContractMethod<[], [bigint], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  pause: TypedContractMethod<[], [void], "nonpayable">;

  recipientCertificates: TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [bigint],
    "view"
  >;

  registerInstitution: TypedContractMethod<
    [
      _institutionAddress: AddressLike,
      _name: string,
      _registrationNumber: string
    ],
    [void],
    "nonpayable"
  >;

  revocations: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, bigint, string, string] & {
        certificateId: bigint;
        revocationDate: bigint;
        reason: string;
        revokedBy: string;
      }
    ],
    "view"
  >;

  revokeCertificate: TypedContractMethod<
    [_certificateId: BigNumberish, _reason: string],
    [void],
    "nonpayable"
  >;

  rollNumberCertificates: TypedContractMethod<
    [arg0: string, arg1: BigNumberish],
    [bigint],
    "view"
  >;

  rollNumberExists: TypedContractMethod<[arg0: string], [boolean], "view">;

  totalCertificatesIssued: TypedContractMethod<[], [bigint], "view">;

  totalInstitutions: TypedContractMethod<[], [bigint], "view">;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  updateInstitutionStatus: TypedContractMethod<
    [
      _institutionAddress: AddressLike,
      _isAuthorized: boolean,
      _isActive: boolean
    ],
    [void],
    "nonpayable"
  >;

  usedHashes: TypedContractMethod<[arg0: BytesLike], [boolean], "view">;

  verifyCertificate: TypedContractMethod<
    [_certificateId: BigNumberish],
    [
      [boolean, string, bigint] & {
        isValid: boolean;
        status: string;
        securityScore: bigint;
      }
    ],
    "view"
  >;

  verifyCertificateByContentHash: TypedContractMethod<
    [_contentHash: BytesLike],
    [
      [boolean, bigint, string] & {
        isValid: boolean;
        certificateId: bigint;
        status: string;
      }
    ],
    "view"
  >;

  verifyWithContent: TypedContractMethod<
    [
      _certificateId: BigNumberish,
      _providedContentHash: BytesLike,
      _rollNumber: string,
      _name: string
    ],
    [
      [boolean, string, bigint] & {
        isValid: boolean;
        status: string;
        securityScore: bigint;
      }
    ],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "batchIssueCertificates"
  ): TypedContractMethod<
    [
      _rollNumbers: string[],
      _names: string[],
      _courses: string[],
      _institution: string,
      _dateIssued: BigNumberish,
      _contentHashes: BytesLike[],
      _metadataHashes: BytesLike[],
      _signatures: BytesLike[]
    ],
    [bigint[]],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "certificates"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [
        bigint,
        string,
        string,
        string,
        string,
        string,
        bigint,
        boolean,
        string,
        string,
        string,
        string,
        string,
        bigint,
        boolean,
        string
      ] & {
        id: bigint;
        rollNumber: string;
        recipient: string;
        name: string;
        course: string;
        institution: string;
        dateIssued: bigint;
        isValid: boolean;
        contentHash: string;
        metadataHash: string;
        combinedHash: string;
        institutionSignature: string;
        institutionAddress: string;
        timestamp: bigint;
        isClaimed: boolean;
        ipfsHash: string;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "claimCertificate"
  ): TypedContractMethod<
    [
      _rollNumber: string,
      _certificateId: BigNumberish,
      _studentSignature: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getCertificate"
  ): TypedContractMethod<
    [_certificateId: BigNumberish],
    [EnhancedCertificateContract.CertificateStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getCertificatesByRecipient"
  ): TypedContractMethod<[_recipient: AddressLike], [bigint[]], "view">;
  getFunction(
    nameOrSignature: "getCertificatesByRollNumber"
  ): TypedContractMethod<[_rollNumber: string], [bigint[]], "view">;
  getFunction(
    nameOrSignature: "getContractStats"
  ): TypedContractMethod<
    [],
    [
      [bigint, bigint, bigint, bigint] & {
        totalCerts: bigint;
        totalInsts: bigint;
        activeCerts: bigint;
        revokedCerts: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getInstitutionInfo"
  ): TypedContractMethod<
    [_institution: AddressLike],
    [EnhancedCertificateContract.InstitutionStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getRevocationInfo"
  ): TypedContractMethod<
    [_certificateId: BigNumberish],
    [EnhancedCertificateContract.RevocationRecordStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "hashToCertificateId"
  ): TypedContractMethod<[arg0: BytesLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "institutions"
  ): TypedContractMethod<
    [arg0: AddressLike],
    [
      [string, string, boolean, bigint, bigint, boolean] & {
        name: string;
        registrationNumber: string;
        isAuthorized: boolean;
        registrationDate: bigint;
        totalCertificatesIssued: bigint;
        isActive: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "issueCertificate"
  ): TypedContractMethod<
    [
      _rollNumber: string,
      _name: string,
      _course: string,
      _institution: string,
      _dateIssued: BigNumberish,
      _contentHash: BytesLike,
      _metadataHash: BytesLike,
      _institutionSignature: BytesLike
    ],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "nextCertificateId"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "pause"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "recipientCertificates"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "registerInstitution"
  ): TypedContractMethod<
    [
      _institutionAddress: AddressLike,
      _name: string,
      _registrationNumber: string
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "revocations"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, bigint, string, string] & {
        certificateId: bigint;
        revocationDate: bigint;
        reason: string;
        revokedBy: string;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "revokeCertificate"
  ): TypedContractMethod<
    [_certificateId: BigNumberish, _reason: string],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "rollNumberCertificates"
  ): TypedContractMethod<[arg0: string, arg1: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "rollNumberExists"
  ): TypedContractMethod<[arg0: string], [boolean], "view">;
  getFunction(
    nameOrSignature: "totalCertificatesIssued"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "totalInstitutions"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateInstitutionStatus"
  ): TypedContractMethod<
    [
      _institutionAddress: AddressLike,
      _isAuthorized: boolean,
      _isActive: boolean
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "usedHashes"
  ): TypedContractMethod<[arg0: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "verifyCertificate"
  ): TypedContractMethod<
    [_certificateId: BigNumberish],
    [
      [boolean, string, bigint] & {
        isValid: boolean;
        status: string;
        securityScore: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "verifyCertificateByContentHash"
  ): TypedContractMethod<
    [_contentHash: BytesLike],
    [
      [boolean, bigint, string] & {
        isValid: boolean;
        certificateId: bigint;
        status: string;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "verifyWithContent"
  ): TypedContractMethod<
    [
      _certificateId: BigNumberish,
      _providedContentHash: BytesLike,
      _rollNumber: string,
      _name: string
    ],
    [
      [boolean, string, bigint] & {
        isValid: boolean;
        status: string;
        securityScore: bigint;
      }
    ],
    "view"
  >;

  getEvent(
    key: "CertificateClaimed"
  ): TypedContractEvent<
    CertificateClaimedEvent.InputTuple,
    CertificateClaimedEvent.OutputTuple,
    CertificateClaimedEvent.OutputObject
  >;
  getEvent(
    key: "CertificateIssued"
  ): TypedContractEvent<
    CertificateIssuedEvent.InputTuple,
    CertificateIssuedEvent.OutputTuple,
    CertificateIssuedEvent.OutputObject
  >;
  getEvent(
    key: "CertificateRevoked"
  ): TypedContractEvent<
    CertificateRevokedEvent.InputTuple,
    CertificateRevokedEvent.OutputTuple,
    CertificateRevokedEvent.OutputObject
  >;
  getEvent(
    key: "InstitutionRegistered"
  ): TypedContractEvent<
    InstitutionRegisteredEvent.InputTuple,
    InstitutionRegisteredEvent.OutputTuple,
    InstitutionRegisteredEvent.OutputObject
  >;
  getEvent(
    key: "InstitutionStatusChanged"
  ): TypedContractEvent<
    InstitutionStatusChangedEvent.InputTuple,
    InstitutionStatusChangedEvent.OutputTuple,
    InstitutionStatusChangedEvent.OutputObject
  >;

  filters: {
    "CertificateClaimed(uint256,string,address)": TypedContractEvent<
      CertificateClaimedEvent.InputTuple,
      CertificateClaimedEvent.OutputTuple,
      CertificateClaimedEvent.OutputObject
    >;
    CertificateClaimed: TypedContractEvent<
      CertificateClaimedEvent.InputTuple,
      CertificateClaimedEvent.OutputTuple,
      CertificateClaimedEvent.OutputObject
    >;

    "CertificateIssued(uint256,string,string,string,address,bytes32,bytes32)": TypedContractEvent<
      CertificateIssuedEvent.InputTuple,
      CertificateIssuedEvent.OutputTuple,
      CertificateIssuedEvent.OutputObject
    >;
    CertificateIssued: TypedContractEvent<
      CertificateIssuedEvent.InputTuple,
      CertificateIssuedEvent.OutputTuple,
      CertificateIssuedEvent.OutputObject
    >;

    "CertificateRevoked(uint256,address,string)": TypedContractEvent<
      CertificateRevokedEvent.InputTuple,
      CertificateRevokedEvent.OutputTuple,
      CertificateRevokedEvent.OutputObject
    >;
    CertificateRevoked: TypedContractEvent<
      CertificateRevokedEvent.InputTuple,
      CertificateRevokedEvent.OutputTuple,
      CertificateRevokedEvent.OutputObject
    >;

    "InstitutionRegistered(address,string,string)": TypedContractEvent<
      InstitutionRegisteredEvent.InputTuple,
      InstitutionRegisteredEvent.OutputTuple,
      InstitutionRegisteredEvent.OutputObject
    >;
    InstitutionRegistered: TypedContractEvent<
      InstitutionRegisteredEvent.InputTuple,
      InstitutionRegisteredEvent.OutputTuple,
      InstitutionRegisteredEvent.OutputObject
    >;

    "InstitutionStatusChanged(address,bool,bool)": TypedContractEvent<
      InstitutionStatusChangedEvent.InputTuple,
      InstitutionStatusChangedEvent.OutputTuple,
      InstitutionStatusChangedEvent.OutputObject
    >;
    InstitutionStatusChanged: TypedContractEvent<
      InstitutionStatusChangedEvent.InputTuple,
      InstitutionStatusChangedEvent.OutputTuple,
      InstitutionStatusChangedEvent.OutputObject
    >;
  };
}
